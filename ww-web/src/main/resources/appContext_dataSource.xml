<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd ">

	<!-- 配置文件获取,简便形式 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:*properties/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<tx:annotation-driven/>
	<!-- 数据源模板 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${default.driverClassName}" />
		<property name="url" value="${default.url}" />
		<property name="username" value="${default.username}" />
		<property name="password" value="${default.password}" />
		<!-- 连接池支持的最大连接数，默认8 -->
		<property name="maxActive" value="${default.maxActive}" />
		<!-- 连接池中最多可空闲的连接数 ，默认8 ，超过的空闲连接将被释放 -->
		<property name="maxIdle" value="${default.maxIdle}" />
		<!-- 连接池中最少空闲连接数，默认0 ，低于则创建新的连接 -->
		<property name="minIdle" value="${default.minIdle}" />
		<!-- 连接池中连接用完时，新的请求等待时间，毫秒 ，默认无限 -->
		<property name="maxWait" value="${default.maxWait}" />
		<!-- 初始化连接数 ，默认0 -->
		<property name="initialSize" value="${default.initialSize}" />
		<!-- 空闲连接检查数量 -->
		<property name="numTestsPerEvictionRun" value="${default.numTestsPerEvictionRun}" />
		<!-- 以下两个一起使用，前者根据时间检查空闲连接，把空闲时间超过后者的连接断开，直到连接池中的连接数到minIdle为止 空闲连接检查时间(毫秒) -->
		<property name="timeBetweenEvictionRunsMillis" value="${default.timeBetweenEvictionRunsMillis}" />
		<!-- 连接池中连接可空闲的时间 -->
		<property name="minEvictableIdleTimeMillis" value="${default.minEvictableIdleTimeMillis}" />
		<!-- sql查询，用来验证从连接池取出来的连接，在将连接返回给调用者之前 -->
		<property name="validationQuery" value="SELECT 1" />
		<!-- 取得对象时是否进行验证，检查对象是否有效 -->
		<property name="testOnBorrow" value="true" />
		<!-- 返回对象时是否进行验证，检查对象是否有效 -->
		<property name="logAbandoned" value="true" />
		<!-- 空闲时是否进行验证，检查对象是否有效 -->
		<property name="testOnReturn" value="true"/> 
		<!-- 连接泄露时是否打印  -->
		<property name="testWhileIdle" value="true"/> 
		<!-- 是否自动回收超时连接  存在bug 不应该使用  -->
		<!-- <property name="removeAbandoned" value="true"/> -->
		<!-- 超时时间 秒为单位 默认300-->
		<!-- <property name="removeAbandonedTimeout" value="240"/> -->
	</bean>

	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.ww" />
		<property name="configLocation" value="classpath:myBatis.xml"/>
	</bean>
	<!-- 映射含有@Repository的类（dao或mapper） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="basePackage" value="com.ww" />
	</bean>

	<!-- 事务管理器配置, 使用jdbc事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<aop:aspectj-autoproxy />
	<bean id="aspect" class="com.ww.framework.aop.AspectJLoggerAOP" />
	
	<!-- 使用annotation定义事务 -->
	
	<!-- 定义事务通知 -->  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <!-- 定义方法的过滤规则 -->
	    <tx:attributes>  
	        <!-- 所有方法都使用事务 -->  
	        <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
	        <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
	        <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
	        <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
<!-- 	        <tx:method name="upOrDel*" propagation="REQUIRED" rollback-for="Exception"/> -->
	        <!-- 定义所有get开头的方法都是只读的 -->
	        <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
	    </tx:attributes>
	</tx:advice>  
  
	<!-- 定义AOP配置 -->  
	<aop:config>
	    <!-- 定义一个切入点 -->  
	    <aop:pointcut expression="execution (* com.ww.persist.mybatis.service.transaction.*.*(..))" id="services"/>
	    <!-- 对切入点和事务的通知，进行适配 -->  
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="services"/>
	</aop:config>

</beans>